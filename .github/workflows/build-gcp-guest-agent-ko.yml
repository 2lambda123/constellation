name: Build and Upload GCP guest-agent container (KO)
env:
  REGISTRY: ghcr.io
  KO_DATA_PATH: /etc/default/

on:
  workflow_dispatch:
    inputs:
      pushTag:
        description: "Use this image tag"
        required: false
    generateKoSBOM:
      description: "Generate unsigned ko SBOM"
      required: false
      default: "false"
  push:
    branches:
      - main
      - "release/**"
      - "feat/reproducible-builds-ko"

jobs:
  build-gcp-guest-agent:
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        version: ["20220927.00"]
        include:
          - version: "20220927.00"
            latest: true
    steps:
      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3.1.0
        with:
          repository: "GoogleCloudPlatform/guest-agent"
          ref: refs/tags/${{ matrix.version }}
          path: "guest-agent"

      - uses: actions/checkout@93ea575cb5d8a053eaa0ac8fa3b40d7e05a33cc8 # tag=v3.1.0
        with:
          ref: ${{ github.head_ref }}
          path: "constellation"


      - name: Prepare hardcoded configuration file
        working-directory: ${{ github.workspace }}
        run: |
          # cwd = /home/runner/work/constellation/constellation
          koData="./guest-agent/kodata"
          mkdir -p $koData
          cp ./constellation/3rdparty/gcp-guest-agent/instance_configs.cfg $koData
          cp ./constellation/.ko.yaml ./guest-agent/.ko.yaml

      # one-filer to solve path issues
      - name: Set up ko
        uses: imjasonh/setup-ko@v0.6

      - name: Build and upload ko container image
        working-directory: ./guest-agent
        shell: bash
        id: build
        env:
          KO_USER: ${{ github.actor }}
          KO_CONFIG_PATH: ./.ko.yaml
          KO_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
          KO_DOCKER_REPO: $REGISTRY/edgelesssys/gcp-guest-agent-ko
        run: |
          tags="test"
          sbom=""
          pwd

          if [ "${{ github.ref }}" == "${{ github.event.repository.default_branch }}" ]; then
            tags="latest"
          else:
            tags="${{ github.sha }}"
          fi

          if [ -n "${{ inputs.pushTag }}" ]; then
            if [ -n "${tags}" ]; then
              tags="${tags},${{ inputs.pushTag }}"
            else
              tags="${{ inputs.pushTag }}"
            fi
          fi

          if [ -n "${{ steps.pseudo-version.outputs.pseudoVersion }}" ]; then
            if [ -n "${tags}" ]; then
              tags="${tags},${{ steps.pseudo-version.outputs.pseudoVersion }}"
            else
              tags="${{ steps.pseudo-version.outputs.pseudoVersion }}"
            fi
          fi

          if [ "${{ inputs.generateKoSBOM }}" == "false" ]; then
            sbom="--sbom=none"
          fi

          go mod download all
          container_full=$(ko build ./google_guest_agent --bare --tags ${tags} ${sbom})
          container_image=$(echo $container_full | cut -d@ -f1)
          container_tag=$(echo $container_full | cut -d: -f2)

          echo "CONTAINER_FULL=$container_full" >> $GITHUB_ENV
          echo "CONTAINER_IMAGE=$container_image" >> $GITHUB_ENV
          echo "CONTAINER_TAG=$container_tag" >> $GITHUB_ENV

      - name: Generate SBOM
        uses: ./constellation/.github/actions/container_sbom
        with:
          containerReference: ${{ env.CONTAINER_FULL }}
          cosignPublicKey: ${{ startsWith(github.ref, 'refs/heads/release/v') && secrets.COSIGN_PUBLIC_KEY || secrets.COSIGN_DEV_PUBLIC_KEY }}
          cosignPrivateKey: ${{ startsWith(github.ref, 'refs/heads/release/v') && secrets.COSIGN_PRIVATE_KEY || secrets.COSIGN_DEV_PRIVATE_KEY }}
          cosignPassword: ${{ startsWith(github.ref, 'refs/heads/release/v') && secrets.COSIGN_PASSWORD || secrets.COSIGN_DEV_PASSWORD }}
